/** 
 * Prolog knowledge base Capacity/Skill for SARL
 * 
 * Copyright (C) 2018 Sebastian Sardina (ssardina@gmail.com).

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package io.sarl.extras

import java.nio.file.Paths
import java.util.Map
import java.util.Collection
import java.util.Iterator
import org.jpl7.Term

// MOCHALOG
// Check https://github.com/ssardina/mochalog/blob/master/subprojects/mochalog-bridge/java-api/src/main/java/io/mochalog/bridge/prolog/PrologContext.java


/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 */
capacity KB_Prolog {
	
	/*
	 * Consult a into the Prolog engine
	 * 
	 * @param file the file to be consulted
		 */
	@Deprecated
	def consult_file(file : String)
	
	def consult(file : String) : boolean

	/* 
	 * Set the root dir for dumping knowledge bases
	 */
	def set_dump_root(kb_dump_dir : String)
	/*
	 * Dump the current KB to file
	 */
	def dump_kb()
	/*
	 * Dump the current KB to file and use id in file name
	 * 
	 * @param id to add to filename
	 */ 
	def dump_kb(id : String)
	/*
	 * Return the handler for the prolog engine
	 */
	def get_prolog_engine()	: Object
	/*
	 * Return name of the KB
	 */
	def get_kb_name() : String

	/** 
	 * B - API for updating the KB
	 */

	/* 
	 * Assert/retract an unformatted query
	 */
	def assertFirst(query : String, params : Object*)
	def assertLast(query : String, params : Object*)
	def retract(query : String, params : Object*)
	def retractAll(query : String, params : Object*)

	/** 
	 * C - API for Performing various types of queries: boolean proof, one solution, all solutions, solution iterator
	 */

	/* 
	 * Prove an unformatted query
	 */
	def prove(query : String, params : Object*) : boolean
	def proveIn(query : String, module : Object, params : Object*) : boolean

	/* 
	 * Get the first result of an unformatted query as a Map from variable names to terms
	 */
	def askOnce(query : String, params : Object*) : Map<String, Term>
	def askOnceIn(query : String, module : Object, params : Object*) : Map<String, Term>

	/*
	 * Get all the answers for an unformatted query as a COllection of mappings vars --> terms
	 */
	def askForAllSolutions(query : String, params : Object*) : Collection<Map<String, Term>>
	def askForAllSolutionsIn(query : String, module : Object, params : Object*) : Collection<Map<String, Term>>


	/*
	 * Open a new query session in Prolog and returns an object with an iterable 
	 */
	def ask(query : String, params : Object*) : Iterator
	def askIn(query : String, module : Object, params : Object*) : Iterator
}

