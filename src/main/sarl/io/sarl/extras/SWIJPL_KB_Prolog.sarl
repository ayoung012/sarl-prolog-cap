package io.sarl.extras

import io.sarl.core.Logging
import java.io.File
import java.nio.file.Paths
import java.text.SimpleDateFormat
import java.util.ArrayList
import java.util.Collection
import java.util.Date
import java.util.List
import java.util.Map
import java.util.Random
import org.apache.commons.lang3.StringUtils
import org.jpl7.Atom
import org.jpl7.Compound
import org.jpl7.Float
import org.jpl7.Integer
import org.jpl7.JPL
import org.jpl7.JRef
import org.jpl7.Query
import org.jpl7.Term
import org.jpl7.Variable

/** 
 * A skill implementing KB_Prolog capacity via SWIPL (https://www.swi-prolog.org/) and JPL framework https://jpl7.org/
 * 
 * The main feature on top of JPL are:
 * 
 * 1. Module/sandboxing: the skill will create a specific module so that the agent owner has its own KB.
 * 2. Much more direct use of JPL placeholders ?: no need to create new object terms for the arguments: skill will guess them!
 * 
 * @author Sebastian Sardina (ssardina@gmail.com)
 */
@SuppressWarnings("potential_inefficient_value_conversion", "potential_field_synchronization_problem")
skill SWIJPL_KB_Prolog implements KB_Prolog {
//	requires Logging
	uses Logging
	
	// Runtime of object creation - used to timestamp a directory to dump the KB
	val formatter = new SimpleDateFormat("yyyy-MM-dd--HH-mm-ss")
//	val runtime_timestamp = formatter.format(new Date()) // store runtime date time as a string

	protected val kb_name : String // Informal name given to the KB by the agent owner (may not be unique!)
	var module_name : String // name of the SWI Prolog module to be used for this skill instance (will be unique!)
	var kb_dump_dir : String // directory where the current KB is to be dumped

//	val swi_home = System.getenv("SWI_HOME_DIR")
//	val swi_exec = System.getenv("SWI_EXEC_FILE")
//	val swi_boot = System.getenv("SWIPL_BOOT_FILE")

	/**
	 * CONSTRUCTORS AND INSTALL
	 */
	new(name : String, kb_dump_dir : String) {
		super() // Call the super's constructor
		kb_name = name
	
		if(kb_dump_dir !== null) set_dump_root(kb_dump_dir)

		
	}

	new(name : String) {
		this(name, null)
		set_dump_root(Paths.get("kb_dump", formatter.format(new Date())).toString)
	}

	
	def install() {
//		module_name = String.format("'%s'", this.owner.ID.toString)
//		module_name = String.format("agt%d", new Random().nextInt(10000))
		
		// This will be: agt_<first letters of SARL agent UUID>_random int
		module_name = String.
			format("agt_%s_%d", StringUtils.substringBefore(this.owner.ID.toString, "-"), new Random().nextInt(100000))
		
		debug("Prolog skill SWI-JPL for Prolog capacity INSTALLED with module name: {0}", module_name)
	}

	private def add_module(query : String) : String {
		return add_module(this.module_name, query) 
	}

	private def add_module(module : String, query : String) : String {
		return String.format("'%s':(%s)", module, query)
	}

	def init_JPL {
		val init_swi_config = String.format("%s -x %s -F swipl --home=%s -g true -q", System.getenv("SWI_EXEC_FILE"),
			System.getenv("SWIPL_BOOT_FILE"), System.getenv("SWI_HOME_DIR"));
		JPL.setDefaultInitArgs(init_swi_config.split("\\s+")); // initialize SWIPL engine
		JPL.init()
	}


	/**
	 * MAIN API FRAMEWORK implementing the Prolog KB Capacity
	 */
	@Deprecated
	def consult_file(file : String) {
		consult(file)
	}

	def consult(file : String) : boolean {

		// When Prolog consults a given file into a module, it cannot consult the same file into another module.
		//	Basically the file is linked to the module and cannot be re-used it
		//  This does not allow re-loading the same file in different agent modules 
		//	val query = add_module(String.format("load_files('%s',[])", file))
		
		// Workaround to avoid the restriction that each file must be loaded/consulted into one module only.
		// We make the file appear as a stream, and we give them a different id for loading: <module_name>_<file name> 
		// TODO: maybe we want to assert this at the start once in the user module and then use it?
		val query = String.format("open('%s', read, _FS), load_files('%s_%s',[stream(_FS)]), close(_FS)", file, module_name, file)
		return Query.hasSolution(add_module(query))
	}

	def use_module(file : String) : boolean {
		val query = String.format("use_module('%s')", file)
		return Query.hasSolution(add_module(query))
	}
	

	def set_dump_root(dir : String) {
		kb_dump_dir = dir
		val x = new File(kb_dump_dir) 
		if (!x.exists()) x.mkdirs()
	}


	def dump_kb() {
		dump_kb(kb_name)
	}

	def dump_kb(id : String) {

		//	escape % via double %%
		// F has to be anonymous because JPL cannot return a blob: gives error (so we use _F)
//		val timestamp_format = "'%Y-%m-%d--%H-%M-%S'"

		// Format of file to dump: kb_directory_path/
		val query = String.format("
					prolog_to_os_filename(\"%s/kb-%s-%s.pl\", _FileName),
					open(_FileName, write, _F), set_output(_F), listing, close(_F)", kb_dump_dir, id,
			formatter.format(new Date()))

		// When we prove query, we basically execute a listing/0 sending the output to a file with timestamp and id
		if (!Query.hasSolution(add_module(query))) {
			error("Dumping the database did not work!")
		}
	}

	def get_kb_name() : String {
		return kb_name
	}

	def get_prolog_engine() : String {
		return module_name
	}

	private def paramsToTerms(params : Object*) {
		val paramsTerms : List<Term> = new ArrayList<Term>(params.size)

		params.forEach [ param : Object |
			if (param instanceof Number) {
				if (param instanceof java.lang.Integer) {
					paramsTerms.add(new Integer(param.intValue))
				} else // Float or Double
					paramsTerms.add(new Float(param.doubleValue))
			} else if (param instanceof String) {
				if (Character.isUpperCase(param.charAt(0))) {	
					paramsTerms.add(new Variable(param))
				} else if (param.startsWith("'")) {
					val prolog_atom : String = StringUtils.substringBetween(param, "'", "'")
					paramsTerms.add(new Atom(prolog_atom))
				} else if (!param.contains("(") && !param.contains("[") && !param.contains(" is ")) {
					paramsTerms.add(new Atom(param))
				} else {
					val prolog_term = Term.textToTerm(param)
//					debug("The converted prolog term is: {0}", prolog_term)
					paramsTerms.add(prolog_term)
				}
			} else if (param instanceof JRef || param instanceof Atom || param instanceof Compound ||
				param instanceof Integer || param instanceof Float) {
				paramsTerms.add(param as Term)
			} else { // if (param instanceof Object)
				paramsTerms.add(new JRef(param))
			}
//			debug("\t The converted parameter is: {0}", paramsTerms.last)
		]
		return paramsTerms
	}

	def assertFirst(queryString : String, params : Object*) {
		// Extend params with the agent name (last argument)
		Query.hasSolution(add_module(String.format("asserta(%s)", queryString)), paramsToTerms(params))
	}

	def assertLast(queryString : String, params : Object*) {
		Query.hasSolution(add_module(String.format("assertz(%s)", queryString)), paramsToTerms(params))
	}

	def retract(queryString : String, params : Object*) {
		Query.hasSolution(add_module(String.format("retract(%s)", queryString)), paramsToTerms(params))
	}

	def retractAll(queryString : String, params : Object*) {
		Query.hasSolution(String.format(add_module("retractall(%s)"), queryString), paramsToTerms(params))
	}


	/**
	 * API for Performing various types of queries: boolean proof, one solution, all solutions, solution iterator
	 */


	//	Prove a query: just return true or false (no variable bindings!)
	def prove(queryString : String, params : Object*) : boolean {
		return proveIn(queryString, module_name, params)
	}
	def proveIn(queryString : String, module : Object, params : Object*) : boolean {
		return Query.hasSolution(add_module((module as String), queryString), paramsToTerms(params))
	}

	// Prove a query just once, but return mapping from variables to terms
	// (Returns null object if no solution is found)
	def askOnce(queryString : String, params : Object*) : Map<String, Term> {
		return askOnceIn(queryString, module_name, params)
	}
	def askOnceIn(queryString : String, module : Object, params : Object*) : Map<String, Term> {
		return Query.oneSolution(add_module((module as String), queryString), paramsToTerms(params))
	}
	

	// Prove a query and get ALL solutions in a collection of mappings from variables to terms
	// (Returns empty collection if no solution is found)
	def askForAllSolutions(queryString : String, params : Object*) : Collection<Map<String, Term>> {
		return askForAllSolutionsIn(queryString, module_name, params)
	}
	def askForAllSolutionsIn(queryString : String, module : Object, params : Object*) : Collection<Map<String, Term>> {
		return Query.allSolutions(add_module((module as String), queryString), paramsToTerms(params))
	}


	// Prove a query incrementally, by returning an iterator solution object (with a .next method for next solution, if any)
	// (Returns empty collection if no solution is found)
	def ask(queryString : String, params : Object*) : Query {
		return askIn(queryString, module_name, params)
	}
	def askIn(queryString : String, module : Object, params : Object*) : Query {
		return new Query(add_module((module as String), queryString), paramsToTerms(params))
	}

	def quote(atom : String) : String {
		return String.format("'%s'", atom)
	}
}
