/** 
 * A skill implementing KB_Prolog capacity via JPL framework https://jpl7.org/
 * 
 * The main feature on top of JPL are:
 * 	1. Module/sandboxing: the skill will create a specific module so that the agent owner has its own KB
 *  2. Much more direct use of JPL placeholders ?: no need to create new object terms for the arguments: skill will guess them!
 * 
 * @author Sebastian Sardina (ssardina@gmail.com)
 */
package io.sarl.extras

import io.sarl.core.Logging


import org.jpl7.Term
import org.jpl7.JRef
import org.jpl7.Compound
import org.jpl7.Atom
import org.jpl7.Query
import org.jpl7.Util

import java.util.Collection
import java.util.Map
import java.util.ArrayList
import java.util.Iterator
import java.util.Date
import java.io.File
import java.text.SimpleDateFormat
import java.util.List

import org.apache.commons.lang3.StringUtils

skill SWIJPL_KB_Prolog implements KB_Prolog {
	requires Logging
	uses Logging
	
	
	protected val kb_name : String

	// All data for the directory where KB will be dump
	val formatter = new SimpleDateFormat("yyyy-MM-dd--HH-mm-ss")
	val runtime_timestamp = formatter.format(new Date()) // store runtime date time as a string
	var kb_dump_root_dir : String
	var kb_directory_path_posix : String
	var kb_dump_dir : File

	var module_name : String

	new(name : String, dump_dir : String = "kb_jpl_dump") {
		super() // Call the super's constructor
		kb_name = name

		set_dump_root(dump_dir)
	}
	
	
	def install() {
		module_name = String.format("'%s'", this.owner.ID.toString)
//		module_name = String.format("agt%d", new Random().nextInt(10000))
	}

	private def add_module(query : String) : String {
		return add_module(this.module_name, query) 
	}

	private def add_module(module : String, query : String) : String {
		return String.format("%s:(%s)", module, query)
	}

	@Deprecated
	def consult_file(file : String) {
		consult(file)
	}

	def consult(file : String) : boolean {
		return Query.hasSolution(add_module(String.format("load_files('%s',[])", file)))
	}

	def set_dump_root(dir : String) {
		kb_dump_root_dir = dir

		// Create if necessary the directory where the KB will be dump for this exec: kb_dump_root_dir/runtime_timestamp/
		kb_dump_dir = new File(kb_dump_root_dir.concat(File.separator).concat(runtime_timestamp))
		if (!kb_dump_dir.exists())
			kb_dump_dir.mkdirs()

		kb_directory_path_posix = String.format("%s/%s", kb_dump_root_dir, runtime_timestamp)
	}

	def dump_kb() {
		dump_kb(kb_name)
	}

	def dump_kb(id : String) {

		//	escape % via double %%
		// F has to be anonymous because JPL cannot return a blob: gives error (so we use _F)
		val timestamp_format = "'%Y-%m-%d--%H-%M-%S'"

		// Format of file to dump: kb_directory_path/
		val query = String.format("
					prolog_to_os_filename(\"%s/kb-%s-%s.pl\", _FileName),
					open(_FileName, write, _F), set_output(_F), listing, close(_F)", kb_directory_path_posix, id,
			formatter.format(new Date()))

		// When we prove query, we basically execute a listing/0 sending the output to a file with timestamp and id
		if (!Query.hasSolution(add_module(query))) {
			error("Dumping the database did not work!")
		}
	}

	def get_kb_name() : String {
		return kb_name
	}

	//	This will yield the Mochalog Prolog object (one can then apply Mochalog methods to it directly!)
	// Not probably the more recommended
	def get_prolog_engine() : String {
//		return engine_t
		return module_name
	}

	private def paramsToTerms(params : Object*) {
		val paramsTerms : List<Term> = new ArrayList<Term>(params.size)

		params.forEach [ param : Object |
			if (param instanceof Number) {
				if (param instanceof Integer) {
					paramsTerms.add(new org.jpl7.Integer(param.intValue))
				} else // Float or Double
					paramsTerms.add(new org.jpl7.Float(param.doubleValue))
			} else if (param instanceof String) {
				if (Character.isUpperCase(param.charAt(0))) {	
					paramsTerms.add(new org.jpl7.Variable(param))
				} else if (param.startsWith("'")) {
					val prolog_atom : String = StringUtils.substringBetween(param, "'", "'")
					paramsTerms.add(new org.jpl7.Atom(prolog_atom))
				} else if (!param.contains("(") && !param.contains("[") && !param.contains(" is ")) {
					paramsTerms.add(new org.jpl7.Atom(param))
				} else {
					val prolog_term = Util.textToTerm(param)
//					debug("The converted prolog term is: {0}", prolog_term)
					paramsTerms.add(prolog_term)
				}
			} else if (param instanceof JRef || param instanceof Atom || param instanceof Compound ||
				param instanceof org.jpl7.Integer || param instanceof org.jpl7.Float) {
				paramsTerms.add(param as Term)
			} else if (param instanceof Object) {
				paramsTerms.add(new JRef(param))
			}
//			debug("\t The converted parameter is: {0}", paramsTerms.last)
		]
		return paramsTerms
	}

	def assertFirst(queryString : String, params : Object*) {
		// Extend params with the agent name (last argument)
		Query.hasSolution(add_module(String.format("asserta(%s)", queryString)), paramsToTerms(params))
	}

	def assertLast(queryString : String, params : Object*) {
		Query.hasSolution(add_module(String.format("assertz(%s)", queryString)), paramsToTerms(params))
	}

	def retract(queryString : String, params : Object*) {
		Query.hasSolution(add_module(String.format("retract(%s)", queryString)), paramsToTerms(params))
	}

	def retractAll(queryString : String, params : Object*) {
		Query.hasSolution(String.format(add_module("retractall(%s)"), queryString), paramsToTerms(params))
	}

	//	Prove a query: just return true or false (no variable bindings!)
	def prove(queryString : String, params : Object*) : boolean {
		return proveIn(queryString, module_name, params)
	}
	def proveIn(queryString : String, module : Object, params : Object*) : boolean {
		return Query.hasSolution(add_module((module as String), queryString), paramsToTerms(params))
	}

	// Prove a query just once, but return mapping from variables to terms
	// (Returns null object if no solution is found)
	def askOnce(queryString : String, params : Object*) : Map<String, Term> {
		return askOnceIn(queryString, module_name, params)
	}

	def askOnceIn(queryString : String, module : Object, params : Object*) : Map<String, Term> {
		return Query.oneSolution(add_module((module as String), queryString), paramsToTerms(params))
	}
	

	// Prove a query and get ALL solutions in a collection of mappings from variables to terms
	// (Returns empty collection if no solution is found)
	def askForAllSolutions(queryString : String, params : Object*) : Collection<Map<String, Term>> {
		return Query.allSolutions(add_module(queryString), paramsToTerms(params))
	}

	// Prove a query incrementally, by returning an iterator solution object (with a .next method for next solution, if any)
	// (Returns empty collection if no solution is found)
	def ask(queryString : String, params : Object*) : Iterator<Map<String, Term>> {
		return new Query(add_module(queryString), paramsToTerms(params))
	}
}
