/** 
 * 
 */
package io.sarl.extras

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle
import java.util.Iterator
import java.util.Map
import org.jpl7.Term
import org.jpl7.PrologException
import org.jpl7.Util

import org.jpl7.JPLException
import org.jpl7.JPL
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import java.util.NoSuchElementException

/** 
 * @author ssardina
 * You can test it as follows:
 * 		java -jar target/sarl-prolog-cap-1.3.0.7.2-jar-with-dependencies.jar io.sarl.extras.TestAgt
 * 		mvn -o exec:java -Dexec.args=io.sarl.extras.TestAgt_SWIJPL
 * 		
 */
 
event TellModule {
	val module : String
	
	new(module : String) {
		this.module = module
	}
}


agent TestAgt_SWIJPL {
	uses Logging
	uses KB_Prolog	
	uses Lifecycle
	uses Schedules

	val testFile = "src/test/resources/testKB.pl"
	
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The TEST agent was started.")
		logLevel = 4

		// SET THE SKILL TO JPL-based PROLOG!!!!!!!!!!!!!
		setSkill(new SWIJPL_KB_Prolog("test", "my_dump_test"))

		info("################################ START TESTING ################################")
		if(test_1()) info("Test 1 passed!") else error("Test 1 failed!")
		if(test_2()) info("Test 2 passed!") else error("Test 2 failed!")
		if(test_3()) info("Test 3 passed!") else error("Test 3 failed!")
		if(test_4()) info("Test 4 passed!") else error("Test 4 failed!")
		if(test_5()) info("Test 5 passed!") else error("Test 5 failed!")
		if(test_6()) info("Test 6 passed!") else error("Test 6 failed!")
		if(test_7()) info("Test 7 passed!") else error("Test 7 failed!")
		if(test_8()) info("Test 8 passed!") else error("Test 8 failed!")
		if(test_9()) info("Test 9 passed!") else error("Test 9 failed!")
		if(test_10()) info("Test 10 passed!") else error("Test 10 failed!")
		if(test_11()) info("Test 11 passed!") else error("Test 11 failed!")
		if(test_12()) info("Test 12 passed!") else error("Test 12 failed!")
		if(test_13()) info("Test 13 passed!") else error("Test 13 failed!")
		if(test_14()) info("Test 100 passed!") else debug("Test 14 failed!")
		if(test_15()) info("Test 100 passed!") else debug("Test 150 failed!")


		info("################################ END TESTING ################################")

//		if (proveIn("slave_test(200)", String.format("'%s'", agent_UUID.toString))) {
//			info("I am happy, have proven something on another agent....")
//			proveIn("listing", String.format("'%s'", agent_UUID.toString))
//		}
//		
		in(5000)[killMe]
	}

	def test_1() : boolean {
		val no = 1
		val queryText = testFile
		info("######### Test {0}: consult file ", no, queryText)
		
		if(!consult(queryText)) return false

		info("\t My KB module is: {0}", get_prolog_engine)
		return true
	}

	def test_2() : boolean {
		val no = 2
		val queryText = "Simple prove, assert, retract."
		info("######### Test {0}: {1} ", no, queryText)

		if(!prove("test(8)")) return false
		if(prove("test(3)")) return false
		
		assertLast("test(200)")
		if(!prove("test(200)")) return false
		retract("test(200)")
		if(prove("test(200)")) return false

		val solutions = askOnce("test(X)")
		if(solutions.empty) return false
		info("\t Variable X = {0}", solutions.get("X").intValue)
		
		return true
	}

	def test_3() : boolean {
		val no = 3
		val queryText = "Ask once and retrieve answer"
		info("######### Test {0}: {1} ", no, queryText)

		val solutions = askOnce("test(X)")
		if(solutions.empty) return false
		info("\t Variable X = {0}", solutions.get("X").intValue)

		return true
	}

	
	def test_4() : boolean {
		val no = 4
		val queryText = "Ask for all solutions"
		info("######### Test {0}: {1} ", no, queryText)

		val expectedSolutions : int[] = #[80, 2, 4, 6, 8]

	
		val solutions = askForAllSolutions("test(X)")
		if (solutions.empty || solutions.size !== expectedSolutions.size) return false
		for (var i : int; i < solutions.size; i++) {
			info("\t Variable X = {0}", solutions.get(i).get("X").intValue)
			if (solutions.get(i).get("X").intValue !== expectedSolutions.get(i)) return false
		}
		return true
	}

	// Iteration
	def test_5() : boolean {
		val no = 5
		val queryText = "Ask for all solutions incrementally with iteration"
		info("######### Test {0}: {1} ", no, queryText)

		//	Ask yields a MQuerySolutionIterator (from Mochalog), which is an Iterator<MQuerySolution>
		val solutionsIter : Iterator<Map<String,Term>> = ask("test_slow(X)")
		while (solutionsIter.hasNext) {
			val solution : Map<String, Term> = solutionsIter.next()
			info("\t Value of X: {0}", solution.get("X").intValue)
		}
		info("Will check hasNext again and it will re-open the query... not so nice implementation from JPL...")
		// https://github.com/SWI-Prolog/packages-jpl/issues/12
		while (solutionsIter.hasNext) {
			val solution : Map<String, Term> = solutionsIter.next()
			info("\t Value of X: {0}", solution.get("X").intValue)
		}
		return true
	}

	def test_6() : boolean {
		val no = 6
		val queryText = "Ask for all solutions incrementally with three variables on it"
		info("######### Test {0}: {1} ", no, queryText)
		
		//	Ask yields a MQuerySolutionIterator (from Mochalog), which is an Iterator<MQuerySolution>
		val solutionsIter : Iterator<Map<String, Term>> = ask("person(X, Y, Z)")
		while (solutionsIter.hasNext) {
			info("\t Solution found: {0}", solutionsIter.next.toString)
		}
		try {
			info("\t Solution found: {0}", solutionsIter.next.toString)
		} catch (e : NoSuchElementException) {
			info("\t NoSuchElementException EXCEPTION CAUGHT: {0}", e.message)
		} catch (e : JPLException) {
			info("\t General JPL EXCEPTION CAUGHT: {0}", e.message)
		}
		return true
	}

	
	//	Test when a query has no solution or predicate does not even exist!
	def test_7() : boolean {
		val no = 7
		val queryText = "Predicate does not exist test."
		info("######### Test {0}: {1} ", no, queryText)

		// this predicate does not work as current_job2/3 does not exist at all
		try {
			val solution = askOnce("current_job2(2, Floor, Dir)")
			warning(" \t Problem: predicate current_job2/3 does not exist at all but no exception generated by SWI")
			return false
		} catch (e : PrologException) {
			info(" \t PrologException caught well! Predicate current_job2/3 does not exist at all. Exception: {0}", e.message)
		}
		return true
	}
	
	def test_8() : boolean {
		val no = 8
		val queryText = "Iterator with different answer types: integer, float, atom, compound."
		info("######### Test {0}: {1} ", no, queryText)

		//	Ask yields a MQuerySolutionIterator (from Mochalog), which is an Iterator<MQuerySolution>
		val solutionsIter : Iterator<Map<String,Term>> = ask("data(X)")
		while (solutionsIter.hasNext) {
			val solution : Map<String, Term> = solutionsIter.next()
			info(" \t Solution found of type {0}", solution.get("X").typeName.toUpperCase)

			if (solution.get("X").integer) {
				info(" \t\t Value as INTEGER: {0}", solution.get("X").intValue)
			}
			if (solution.get("X").float) {
				info(" \t\t Value as FLOAT: {0}", solution.get("X").floatValue)
				info(" \t\t Value as DOUBLE: {0}", solution.get("X").doubleValue)
			}
			if (solution.get("X").atom) {
				info(" \t\t Value of type {0} as String: {1}", solution.get("X").atomType, solution.get("X").toString)
			}
			if (solution.get("X").compound && !solution.get("X").listNil && !solution.get("X").listPair) {
				info(" \t\t Value as COMPOUND TERM of arity {0}: {1}", solution.get("X").arity, solution.get("X").toString)
				for (var i = 0; i < solution.get("X").arity; i++) {
					info(" \t\t\t Term {0} of type {1}: {2}", i,
						solution.get("X").args.get(i).typeName, solution.get("X").args.get(i).toString)
				}
			}
			if (solution.get("X").listNil) {
				info(" \t\t Value as EMPTY LIST: {0}", solution.get("X").toString)
			}
			if (solution.get("X").listPair) {
				val listSolution = solution.get("X").toTermArray.toArray
				info(" \t\t Value as PAIR LIST of length {0}: {1}", Util.listToLength(solution.get("X")), listSolution.toString)
				for (item : listSolution) {
					info(" \t\t\t One member: {0}", item.toString)	
				}
			}
			if (solution.get("X").variable) {
				info(" \t\t Value as VARIABLE: {0}", solution.get("X").toString)
			}
		}
		return true
	}

	def test_9() : boolean {
		val no = 9
		val queryText = "Membership query on a list: member(X, [1,2,3,4])"
		info("######### Test {0}: {1} ", no, queryText)
	
		//	Ask yields a MQuerySolutionIterator (from Mochalog), which is an Iterator<MQuerySolution>
		val solutionsIter : Iterator<Map<String,Term>> = ask("member(X, ?)", "[1,2,3,4]")
		while (solutionsIter.hasNext) {
			val solution : Map<String, Term> = solutionsIter.next()
			info(" \t Value of X (type: {0}): {1}", solution.get("X").typeName.toUpperCase,
				solution.get("X").toString)
		}
		return true
	}

	def test_10() {
		val no = 10
		val queryText = "Query formatting of various types"
		info("######### Test {0}: {1} ", no, queryText)
		var solution : Map<String, Term>
		// Using KB fact: data_all(23, 12.21, sebastian, mother(maria,father(john)), I, [1,2,3,4], ok)

		// integer
		solution = askOnce("data_all(?, 12.21, sebastian, mother(maria,father(john)), V, [1,2,3,4], R)", 23)
		if (solution === null) return false
		info("Solution for integer placeholder: {0}", solution.toString)

		// float test
		solution = askOnce("data_all(23, ?, sebastian, mother(maria,father(john)), V, [1,2,3,4], R)", 12.21)
		if(solution === null) return false
		info("Solution for float placeholder: {0}", solution.toString)

		// atom and compound test
		solution = askOnce("data_all(23, 12.21, ?, ?, I, [1,2,3,4], R)", "sebastian", "mother(maria, father(john))")
		if(solution === null) return false
		info("Solution for atom and compound placeholders: {0}", solution.toString)

		// Variables test
		solution = askOnce("data_all(?, ?, ?, ?, ?, ?, R)", "I", "F", "A", "C", "V", "L")
		if(solution === null) return false
		info("Solution for variables placeholders: {0}", solution.toString)

		// lists test
		solution = askOnce("data_all(23, 12.21, sebastian, mother(maria,father(john)), _, ?, R)", "[1,2,3,4]")
		if(solution === null) return false
		info("Solution for list placeholder: {0}", solution.toString)

		// variable bound to a list
		solution = askOnce("data_list([?])", "X")
		if(solution === null) return false
		info("Solution for variable bound to a list: {0}", solution.toString)

		// variable bound to a list
		solution = askOnce("data_list([?])", "[X]")
		if(solution === null) return false
		info("Solution for variable bound to a list in a list: {0}", solution.toString)

		// expression simple
		solution = askOnce("data_exp(X, Y, Z, Z is X+Y)")
		if(solution === null) return false
		info("Solution for simple expression: {0}", solution.toString)

		// expression simple II
		solution = askOnce("data_exp(X, Y, Z, Exp)")
		if(solution === null) return false
		info("Solution for simple expression II: {0}", solution.toString)

		// expression simple III
		solution = askOnce("data_exp(X, Y, Z, ?)", "Exp")
		if(solution === null) return false
		info("Solution for simple expression III: {0}", solution.toString)

		// expression simple IV
		solution = askOnce("data_exp(2, 10, Z, Exp), Exp")
		if(solution === null) return false
		info("Solution for simple expression IV: {0}", solution.toString)


		// JREF
		val int_obj : Integer = new Integer(232)
		solution = askOnce("print_integer(?, ?)", JPL.newJRef(int_obj), "N")
		if(solution === null) return false
		info("Solution for query print_integer(<int-objcet>, N): {0}", solution.toString)


//
//		solution = askOnce("data([peter, mother(maria), ?, ?)", "X", "[1,2,3,4]")
//		if (solution === null) return false
//		info("Solution for query person(X,11,city(perth)): {0}", solution.toString)



		return true
	}

	def test_11() : boolean {
		val no = 11
		val queryText = "Query on an non existent predicate: exception excepted!"
		info("######### Test {0}: {1} ", no, queryText)
		
		try {
			val res = prove("bad(X)")
			return false
		} catch (e : PrologException) {
			info("\t Correct, PrologException caught well: {0}", e.message)
		}
		return true
	}

	def test_12() : boolean {
		val no = 12
		val queryText = "Huge query assertion"
		info("######### Test {0}: {1} ", no, queryText)

		val data = "[item(item4,41,tools([]),parts([])), item(item14,354,tools([tool2,tool4]),parts([[item13,1],[item3,3],[item9,1]])), simStart, item(item2,44,tools([]),parts([])), maxLat(19.45), item(item9,126,tools([tool1]),parts([[item6,1],[item2,3]])), item(item0,21,tools([]),parts([])), item(tool2,33,tools([]),parts([])), item(tool6,38,tools([]),parts([])), item(tool0,35,tools([]),parts([])), id(2017-mexico-city-test), minLat(19.3), item(tool4,47,tools([]),parts([])), cellSize(500.0), item(item5,42,tools([]),parts([])), team(teamA), proximity(5), item(item8,94,tools([tool1,tool5]),parts([[item7,3],[item4,1],[item0,1]])), item(item6,15,tools([]),parts([])), centerLat(19.4), item(item1,43,tools([]),parts([])), item(tool5,34,tools([]),parts([])), item(tool1,28,tools([]),parts([])), steps(1000), map(mexico-city), item(item10,166,tools([]),parts([[item6,1],[item4,3],[item0,3]])), centerLon(-99.1), item(item11,60,tools([tool3]),parts([[item7,2],[item6,1]])), item(item13,270,tools([tool1]),parts([[item8,3],[item2,1],[item4,1]])), item(tool3,37,tools([]),parts([])), role(truck,2,3000,2000,[tool0,tool2,tool3,tool6]), item(item7,30,tools([]),parts([])), item(tool7,48,tools([]),parts([])), seedCapital(50000), minLon(-99.2), maxLon(-99.0), name(agentA24), item(item12,64,tools([tool7,tool5]),parts([[item11,1],[item7,1]])), item(item3,36,tools([]),parts([])), entity(agentA23,teamA,19.44255,-99.15922,truck), entity(agentA9,teamA,19.32065,-99.13607,motorcycle), entity(agentA13,teamA,19.43401,-99.06124,car), storage(storage13,19.44019,-99.18794,14889,0,[]), entity(agentA20,teamA,19.40171,-99.19236,car), storage(storage7,19.35245,-99.04573,13230,0,[]), storage(storage14,19.42892,-99.10555,8183,0,[]), route([]), shop(shop4,19.35746,-99.19067,5,[item(item0,74,20),item(item1,84,11),item(item2,84,7),item(item5,63,19),item(item6,98,17),item(item7,19,14)]), dump(dump8,19.39958,-99.13238), chargingStation(chargingStation15,19.42892,-99.11276,107), workshop(workshop6,19.40399,-99.18714), shop(shop10,19.39051,-99.03542,4,[item(item1,86,7),item(item2,81,12),item(item3,122,12),item(item5,69,6),item(item7,14,16),item(tool2,45,16),item(tool4,47,11),item(tool6,124,17),item(tool7,48,8)]), entity(agentA1,teamA,19.37562,-99.00317,drone), workshop(workshop5,19.35316,-99.03779), dump(dump9,19.41991,-99.07416), shop(shop1,19.32016,-99.12328,3,[item(item1,91,18),item(tool0,93,10),item(tool1,72,16),item(tool5,107,9),item(tool6,138,9),item(tool7,39,6)]), lastActionResult(successful), entity(agentA26,teamA,19.38986,-99.14356,truck), chargingStation(chargingStation1,19.30823,-99.14639,123), entity(agentA10,teamA,19.3473,-99.19299,motorcycle), chargingStation(chargingStation3,19.30137,-99.04509,91), entity(agentA2,teamA,19.38689,-99.17834,drone), workshop(workshop7,19.39895,-99.0919), chargingStation(chargingStation12,19.3876,-99.07765,128), storage(storage2,19.32609,-99.09198,12589,0,[]), dump(dump13,19.4271,-99.03601), shop(shop0,19.33569,-99.16989,1,[item(item4,101,13),item(tool0,84,20),item(tool3,126,18),item(tool5,108,16),item(tool6,101,12)]), workshop(workshop9,19.44614,-99.19569), chargingStation(chargingStation4,19.30961,-99.03329,119), storage(storage12,19.39664,-99.03379,9594,0,[]), entity(agentA17,teamA,19.37227,-99.13973,car), workshop(workshop10,19.44087,-99.14081), entity(agentA28,teamA,19.30451,-99.04253,truck), entity(agentA12,teamA,19.33519,-99.09793,motorcycle), step(2), lastActionParams([]), chargingStation(chargingStation5,19.35958,-99.1865,73), dump(dump7,19.36426,-99.03392), storage(storage0,19.32686,-99.19329,9604,0,[]), entity(agentA16,teamA,19.31248,-99.0403,car), entity(agentA24,teamA,19.37424,-99.05352,truck), dump(dump0,19.33927,-99.18741), chargingStation(chargingStation2,19.33813,-99.08956,98), facility(), entity(agentA15,teamA,19.30406,-99.10986,car), entity(agentA21,teamA,19.3971,-99.05624,truck), chargingStation(chargingStation9,19.35086,-99.0163,53), lastAction(noAction), shop(shop2,19.32144,-99.0697,3,[item(item0,90,14),item(item6,91,10),item(tool5,133,19)]), entity(agentA11,teamA,19.44882,-99.19551,motorcycle), workshop(workshop3,19.37344,-99.09335), lon(-99.05352), deadline(1538304181625), shop(shop13,19.44068,-99.1147,5,[item(item5,69,6),item(tool0,69,19),item(tool1,85,20)]), storage(storage6,19.3626,-99.11757,13702,0,[]), entity(agentA4,teamA,19.43752,-99.08263,drone), chargingStation(chargingStation0,19.31722,-99.18127,140), dump(dump10,19.38139,-99.02397), entity(agentA8,teamA,19.30023,-99.19738,motorcycle), storage(storage1,19.30076,-99.12679,7824,0,[]), dump(dump5,19.34982,-99.14985), shop(shop9,19.39585,-99.04156,1,[item(item0,70,18),item(item3,95,9),item(item4,141,20),item(item7,16,6),item(tool4,37,20),item(tool5,121,17),item(tool6,120,8),item(tool7,45,9)]), actionID(2), entity(agentA27,teamA,19.33246,-99.10792,truck), chargingStation(chargingStation7,19.37113,-99.11836,54), storage(storage5,19.36626,-99.12744,11163,0,[]), entity(agentA7,teamA,19.33828,-99.12541,motorcycle), chargingStation(chargingStation8,19.3591,-99.05357,111), chargingStation(chargingStation11,19.41131,-99.14265,130), storage(storage8,19.3902,-99.18367,12169,0,[]), timestamp(1538304177625), shop(shop14,19.42382,-99.03512,3,[item(item1,99,17),item(item3,105,9),item(item4,139,19),item(item7,14,20),item(tool0,72,13),item(tool4,36,15),item(tool6,97,19)]), chargingStation(chargingStation10,19.38384,-99.17284,122), dump(dump11,19.42418,-99.17356), workshop(workshop11,19.43077,-99.02892), charge(2000), storage(storage11,19.41385,-99.05545,13467,0,[]), entity(agentA25,teamA,19.36242,-99.02579,truck), shop(shop12,19.43897,-99.14012,2,[item(item1,82,10),item(tool2,56,15),item(tool3,118,19)]), storage(storage10,19.40745,-99.10503,11491,0,[]), entity(agentA19,teamA,19.37567,-99.11684,car), entity(agentA5,teamA,19.40736,-99.05846,motorcycle), requestAction, entity(agentA3,teamA,19.40928,-99.11384,drone), storage(storage3,19.30459,-99.01727,14934,0,[]), shop(shop7,19.39279,-99.1337,5,[item(item0,67,17),item(item1,92,13),item(item2,87,5),item(tool0,68,11),item(tool7,47,17)]), dump(dump2,19.31402,-99.05739), dump(dump12,19.44191,-99.08681), shop(shop8,19.38367,-99.10324,3,[item(item2,84,7),item(item4,144,16),item(item7,17,8),item(tool1,82,11),item(tool3,141,12),item(tool4,39,20),item(tool5,133,9),item(tool6,132,13),item(tool7,53,19)]), entity(agentA18,teamA,19.39969,-99.02349,car), dump(dump6,19.37424,-99.09267), workshop(workshop8,19.41512,-99.01923), shop(shop3,19.33139,-99.00328,1,[item(item0,70,20),item(tool0,91,9),item(tool7,42,10)]), dump(dump3,19.31904,-99.01868), workshop(workshop2,19.33312,-99.08554), storage(storage9,19.41272,-99.15535,9557,0,[]), storage(storage4,19.36119,-99.17035,8040,0,[]), workshop(workshop4,19.37509,-99.05729), shop(shop6,19.39694,-99.1675,5,[item(item1,79,15),item(item2,62,14),item(item5,78,10),item(item7,16,17),item(tool4,39,18)]), entity(agentA6,teamA,19.30774,-99.01944,motorcycle), shop(shop5,19.37946,-99.07389,2,[item(item1,103,15),item(item4,99,9),item(item7,17,13),item(tool1,89,11),item(tool4,37,17),item(tool5,103,7),item(tool6,129,11)]), chargingStation(chargingStation13,19.38638,-99.02568,79), money(50000), entity(agentA14,teamA,19.44007,-99.14925,car), entity(agentA22,teamA,19.33237,-99.02805,truck), chargingStation(chargingStation16,19.4328,-99.03119,89), storage(storage15,19.43708,-99.0397,14486,0,[]), routeLength(0), dump(dump1,19.3315,-99.10955), workshop(workshop1,19.33872,-99.15421), workshop(workshop0,19.33281,-99.1987), dump(dump4,19.34984,-99.19905), shop(shop11,19.42324,-99.19889,4,[item(item1,98,8),item(item3,101,12),item(item4,104,9),item(item6,97,14),item(tool1,87,15)]), load(0), lat(19.37424), chargingStation(chargingStation6,19.35604,-99.12279,120), chargingStation(chargingStation14,19.447,-99.1726,51)]"

		info("\t About to assert huge list..........")
		assertFirst("percepts(?, ?, ?)", "tea", "23", data)
		info("\t Asserted!")

		// expression simple
		val solution = askOnce("percepts(X, Y, Z)")
		if(solution === null) return false
		info("\t Solution: {0}", solution.toString)
		return true
	}

	def test_13() : boolean {
		val no = 13
		val queryText = "Problem with query locks"
		info("######### Test {0}: {1} ", no, queryText)

		//	Ask yields a MQuerySolutionIterator (from Mochalog), which is an Iterator<MQuerySolution>
		val solutionsIter : Iterator<Map<String, Term>> = ask("person(X, Y, Z)")
		while (solutionsIter.hasNext) {
			val sol = solutionsIter.next
			info("\t Solution found (now asserting to block?): {0}", sol.toString)
			assertFirst("name_of_person(?)", sol.get("X").toString) 
		}
		prove("listing(name_of_person/1)")
		return true
	}

	def test_14() : boolean {
		val no = 14
		val queryText = "listing the database"
		info("######### Test {0}: {1}", no, queryText)
	
		dump_kb("test")
		info("\t KB dumped!")
		dump_kb("again")
		info("\t KB dumped again!!")
		return true
	}

	def test_15() : boolean {
		val no = 15
		val queryText = "Spawning two slave agents with own queries"
		info("######### Test {0}: {1}", no, queryText)

		info("\t Now spawning some slave test agents with their KB")
		val agent_UUID = spawn(TestAgt_Slave, 200)
		info("\t I have spawned my child {0}", agent_UUID.toString)

		val agent_UUID2 = spawn(TestAgt_Slave, 100)
		info("\t I have spawned my child {0}", agent_UUID2.toString)
		return true
	}

		

	on TellModule {
		val module_of_another_agent = occurrence.module
		
		info("\t Let us list the KB of another agent with KB module {0}:", module_of_another_agent)
		
		proveIn("listing", module_of_another_agent)
		
	}
}
















agent TestAgt_Slave {
	uses Logging
	uses KB_Prolog
	uses Lifecycle
	uses DefaultContextInteractions
	 
	val testFile = "src/test/resources/testKB.pl"

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		val n = occurrence.parameters.get(0)
		
		info("\t The SLAVE agent was started with number: {0}", n)

		// SET THE SKILL TO JPL-based PROLOG!!!!!!!!!!!!!
		setSkill(new SWIJPL_KB_Prolog("slave", "my_dump_test_slave"))
		info("\t JPL-based KB installed for TestAgt {1} with module name: {0}", get_prolog_engine, n)

		assertLast("slave_test(?)", n)

		// Consult the same file as master
		info("\t I am about to consult file {0}", testFile)
		consult(testFile)
		info("\t File {0} consulted succesfully", testFile)


		assertLast("slave_test(?)", n)
		info("stave_test({0}) asserted!", n)
		
		if (prove("slave_test(?)", n)) 
			info("SLAVE has proven test({0})  CORRECTLY!", n)
		if (prove("Y = ?, X is Y+1, slave_test(X)", n))
			info("SLAVE has proven test({0})  CORRECTLY!", n)

		prove("write(\"FROM PROLOG: KB for the module agent: \"), 
				writeln(?), 
				writeln(\"-------------\"), listing, writeln(\"-------------\")", get_prolog_engine)
		
		try {
			if (prove("test(?)", n))
			info("SLAVE has proven test({0})  WRONGLY because test/1 does not exist!!", n)
		} catch (e : PrologException) {
			info("SLAVE gotten a correct exception because test/1 does not exist in its KB: {0}", e.message)
		}
		
		emit(new TellModule(get_prolog_engine as String))

		info("Done, SLAVE {0} dying and told everyone its KB is module {1}", n, get_prolog_engine)
		killMe
		}
}
