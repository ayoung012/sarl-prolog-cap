/** 
 * 
 */
package io.sarl.extras

import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Lifecycle

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import java.util.HashSet
import java.util.Set
import org.jpl7.Query
import java.util.concurrent.TimeUnit

/** 
 * @author ssardina
 * You can test it as follows:
 * 		java -jar target/sarl-prolog-cap-1.3.0.7.2-jar-with-dependencies.jar io.sarl.extras.TestAgt
 * 		mvn -o exec:java -Dexec.args=io.sarl.extras.TestAgt_SWIJPL
 * 		
 */
 
event Test {
	val n : int

	new(n : int) {
		this.n = n
	}
}

event End {
	val n : int

	new(n : int) {
		this.n = n
	}
}

event Work {
}

@SuppressWarnings("potential_field_synchronization_problem")
agent TestAgt_SWIJPL_MT {
	uses Logging
	uses KB_Prolog	
	uses Lifecycle
	uses Schedules
	uses DefaultContextInteractions

	val testFile = "src/test/resources/testKB_MT.pl"

	var pending : Set<Integer> = new HashSet<Integer>() // set of all SARL agents in the system
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The TEST agent was started.")
		logLevel = 4

		// SET THE SKILL TO JPL-based PROLOG!!!!!!!!!!!!!
		setSkill(new SWIJPL_KB_Prolog("test", "my_dump_test"))

		// we start the testing work with an event because no even can start before Initialize completes fully!
		// this means that if we emit an event, then pause for x seconds here, then that event i not handled; nothing can
		// be handled until Initialize is concluded!
		emit(new Work())
		info("Initailize completed!!!!!!!!!!!!!!!!!!!!!!!!!")
	}




	on Work {
		info("################################ START TESTING MAIN ################################")
		info("My KB module is: {0}", get_prolog_engine)

//		We do not need this anymore as we have the query full verbatim here!
//		prove("consult('src/test/resources/testKB_MT.pl')")
//		assertFirst("agent(main)")


		 // In this test we post events that will open Prolog queries and keep them open fo a while, then close them
		 //  Since each event will be handled in a different thread, a Prolog JPL engine must be attached.
		 // the question then is to investigate which one: a completely new one OR re-use an already used one before (by another thread)
		 //
		 // If we wait 15 seconds between test events, then each event can be processed and the query closed, and the engine reused
		 // Otherwise, the engine may be busy with another open query in another thread, so a new one in the pool has to be attached
		 // 	In that case, if too many event tests are spawn, then some test will be delayed until one of the 10 engines is freed
		 val totalEvents = 5
		 for (var i : int = 0; i < totalEvents; i++) {
			 pending.add(i)
		 }
		 for (var i : int = 0; i < totalEvents; i++) {
			 emit(new Test(i))		// will take 5 seconds to close its query
			 TimeUnit.SECONDS.sleep(15)	
		}

		info("################################ HAVE SPAWN ALL THE TESTS ################################")
		TimeUnit.SECONDS.sleep(10)
		prove("listing(tea_number/2)")	// This will re-use the very first engine for the consult above!
		info("################################ END TESTING MAIN ################################")
		//		in(15000)[killMe]
	}


	on Test {
		// the id number of the test
		val n = occurrence.n
		
		// the query! Used to be in a file...
		val query = "format(string(_Text), \"--------------------------> I have started the query test/4 for id ~d\", [?]),
					  writeln(_Text), !, between(1,?,N), sleep(?)"

//		val solutionsIter : Query = ask("test(?, 15, 0, N)", n)
		val solutionsIter : Query = ask(query, n, 15, 0)
		if (solutionsIter.hasNext) {
			info("------------------------------------  START TESTING *{0}* ------------------------------------", n)
			val sol = solutionsIter.next
			info("\t\t Solution for test {1} (on engine {2}): {0}", sol.toString, n, solutionsIter.engine)
			assertFirst("tea_number(?, ?)", n, sol.get("N").intValue)
		}

		info("^^^^^^^^^ WAITNG 5 seconds to close my query for test **{0}**", n)
		TimeUnit.SECONDS.sleep(5);
		solutionsIter.close
		info("\t ^^^^^^^^^ DONE WAITNG 5 seconds to close  my query for test **{0}**", n)


		emit(new End(n)) // I am done!
		// TimeUnit.SECONDS.sleep(60);
		info("------------------------------------ END TESTING *{0}* ------------------------------------", n)
	}


	on End {
		synchronized (pending) {
			pending.remove(occurrence.n)
			if (pending.empty) {
					info("******************** All events processed.... killing myself........")
					prove("listing(tea_number/2)")
					killMe
			}
		}
	}

}

