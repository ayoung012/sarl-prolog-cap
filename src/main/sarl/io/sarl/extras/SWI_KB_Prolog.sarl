/** 
 * A skill implementing KB_Prolog via Mochalog framework https://github.com/ssardina-research/mochalog
 * 
 * ATTENTION: This skill is superseded by simpler and JPL-direct SWIJPL_KB_Prolog, no Mochalog involved
 * 
 * @author Sebastian Sardina (ssardina@gmail.com)
 */
package io.sarl.extras

import io.mochalog.bridge.prolog.PrologContext
import io.mochalog.bridge.prolog.SandboxedPrologContext
import io.mochalog.bridge.prolog.query.MQuery
import io.mochalog.bridge.prolog.query.exception.NoSuchSolutionException;
import io.mochalog.bridge.prolog.query.collectors.MQuerySolutionCollector
import io.mochalog.bridge.prolog.query.MQuerySolution
import io.mochalog.bridge.prolog.query.MQuerySolutionIterator
import io.mochalog.bridge.prolog.query.MQuerySolutionList

import org.jpl7.Term

import java.util.Collection
import java.util.Map
import java.util.HashMap
import java.util.ArrayList
import java.util.Iterator
import java.util.Date

import java.io.File
import java.text.SimpleDateFormat
import java.nio.file.Paths

// /////////////////////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////////////////
@Deprecated
skill SWI_KB_Prolog implements KB_Prolog {
	protected val kb_name : String

	val prolog : PrologContext // Interface to SWI-Prolog interpreter

	// All data for the directory where KB will be dump
	val formatter = new SimpleDateFormat("yyyy-MM-dd--HH-mm-ss")
	var kb_directory_path_posix : String

	/** 
	 * Create the Skill and set KB dump directory to kb_dump_dir
	 */
	new(name : String, kb_dump_dir : String) {
		super() // Call the super's constructor
		kb_name = name
		prolog = new SandboxedPrologContext(this.kb_name)

		if (kb_dump_dir !== null)	set_dump_root(kb_dump_dir)
	}
	
	/**
	 * Create the Skill and set KB dump directory to kb_dump/<time of skill creation>
	 */
	new(name : String) {
		this(name, null)
		set_dump_root(Paths.get("kb_dump", formatter.format(new Date())).toString)
	}
	

	@Deprecated
	def consult_file(file : String) {
		// Load agent knowledge base
		prolog.importFile(Paths.get(file))
	}

	def consult(file : String) : boolean {
		consult(file)
		return true
	}

	def set_dump_root(kb_dump_dir : String) {
		kb_directory_path_posix = kb_dump_dir

		// if dumping dir does not exist, create it
		val file_kb_directory_path_posix = new File(kb_directory_path_posix)
		if (!file_kb_directory_path_posix.exists())
			file_kb_directory_path_posix.mkdirs()
	}

	def dump_kb() {
		dump_kb(kb_name)
	}

	def dump_kb(id : String) {

		//	escape % via double %%
		// F has to be anonymous because JPL cannot return a blob: gives error (so we use _F)
		val timestamp_format = "'%Y-%m-%d--%H-%M-%S'"

		// Build the query to dump KB (via listing) into dir kb_directory_path_posix
		val query = String.format("
					prolog_to_os_filename(\"%s/kb-%s-%s.pl\", _FileName),
					open(_FileName, write, _F), set_output(_F), listing, close(_F)", kb_directory_path_posix, id,
			formatter.format(new Date()))

		// When we prove query, we basically execute a listing/0 sending the output to a file with timestamp and id
		prolog.prove(query)
	}

	def get_kb_name() : String {
		return kb_name
	}

	//	This will yield the Mochalog Prolog object (one can then apply Mochalog methods to it directly!)
	// Not probably the more recommended
	def get_prolog_engine() : PrologContext {
		return prolog
	}

	def assertFirst(query : String, params : Object*) {
		prolog.assertFirst(query, params)
	}

	def assertLast(query : String, params : Object*) {
		prolog.assertLast(query, params)
	}

	def retract(query : String, params : Object*) {
		prolog.retract(query, params)
	}

	def retractAll(query : String, params : Object*) {
		prolog.retract(query, params)
	}

	//	Prove a query: just return true or false (no variable bindings!)
	def prove(query : String, params : Object*) : boolean {
		return proveIn(query, prolog, params)
	}
	def proveIn(query : String, module : Object, params : Object*) : boolean {
		return (module as PrologContext).prove(query, params)
	}

	// Prove a query just once, but return mapping from variables to terms
	// (Returns null object if no solution is found)
	def askOnce(query : String, params : Object*) : Map<String, Term> {
		askOnceIn(query, prolog, params)
	}

	def askOnceIn(query : String, module : Object, params : Object*) : Map<String, Term> {
		askOnce(query, params) // no notion of module here
		val mquery = MQuery.format(query, params)
		try {
			val solution = (module as PrologContext).askForSolution(mquery)
			return solution.bindings
		} catch (e : NoSuchSolutionException) {
			return null
		}
	}

	// Prove a query and get ALL solutions in a collection of mappings from variables to terms
	// (Returns empty collection if no solution is found)
	def askForAllSolutions(query : String, params : Object*) : Collection<Map<String, Term>> {
		val allSolutions : MQuerySolutionList = prolog.askForAllSolutions(query, params)

		val colSolutions : Collection<Map<String, Term>> = new ArrayList()
		for (solution : allSolutions) {
			// solution is of type MQuerySolutoin
			colSolutions.add(solution.bindings)
		}
		return colSolutions
	}
	// Prove a query incrementally, by returning an iterator solution object (with a .next method for next solution, if any)
	// (Returns empty collection if no solution is found)
//	def ask(query : String, params : Object*) : Iterator<MQuerySolution> {
//		val mquery = MQuery.format(query, params)
//		val solutionIter : Iterator<MQuerySolution> = prolog.askIter(mquery)
//		// val solutionIter : Iterator<MQuerySolution> = new MQuerySolutionIterator(prolog.ask(query))	// manual way of creating an iterator
//		return solutionIter
//	}

	// Prove a query incrementally, by returning an iterator solution object (with a .next method for next solution, if any)
	// (Returns empty collection if no solution is found)
	def ask(query : String, params : Object*) : Iterator<Map<String, Term>> {
		val mquery = MQuery.format(query, params)
		return new SWI_KB_Prolog_Solution_Iter(prolog.ask(mquery))
	}

}

/** 
 * This class implements a solution iterator that is able to return bindings directly, not just MQuerySolutions. 
 * In reality, one can just get the Mochalog MQuerySolutionIterator which yields MQuerySolution and then call .bindings 
 */
class SWI_KB_Prolog_Solution_Iter implements Iterator<Map<String, Term>> {
	var solutionIterator : MQuerySolutionIterator
	val outVars : String[]

	new(q : MQuerySolutionCollector, outVars : String[]) {
		this.solutionIterator = new MQuerySolutionIterator(q)
		this.outVars = outVars
	}

	new(q : MQuerySolutionCollector) {
		this.solutionIterator = new MQuerySolutionIterator(q)
		this.outVars = null
	}

	def hasNext : boolean {
		this.solutionIterator.hasNext
	}

	def next : Map<String, Term> {
		if (solutionIterator.hasNext) {
			val solution = solutionIterator.next

			if (outVars === null) {
				return solution.bindings
			} else {
				val bindings2 = new HashMap(solution.bindings)
				bindings2.keySet().retainAll(outVars)
				return bindings2

				// var out : HashMap<String, Term> = new HashMap()
					// for (outVar : outVars) {
				// out.put(outVar, solution.get(outVar))
				// }
					// return out
			}

		} else {
			return null
		}
	}
}
