/** 
 * Class to boot up task 2 agent controller
 */
import io.janusproject.Boot
import io.sarl.lang.core.Agent
import java.util.Scanner

/** 
 * @author Sebastian Sardina (ssardina@gmail.com)
 * 
 */
class BootTestAgt {
	// Code adapted from example how to boot from name string: 	http://tinyurl.com/ycolmey5
	def static main(args : String[]) : void {
		Boot.offline = true
		Boot.verboseLevel = 7 // ALL
		val basePackage = "io.sarl.extras"
		val AGENTS_AVAILABLE : String[] = #["default", "TestAgt_SWIJPL", "TestAgt_SWIMochalog"]

		// Boot a specific one and that' s it
		// Boot.startJanus(typeof(DummyMultiCarController))
		var agentToLaunch : String
		if (args.length == 0) { // if not agent given in CLI argument, list the available ones and ask user for one
			agentToLaunch = getSelectionFromuser("Choose test agent to run: ", AGENTS_AVAILABLE)
		} else {
			agentToLaunch = args.get(0) 	// get the agent name from CLI first argument
		}

		System.out.println(String.format("Running test agent: \"%s\"", agentToLaunch))
		var fullyQualifiedAgent : String
		switch agentToLaunch {
			case 'default':
				fullyQualifiedAgent = String.format("%s.%s", basePackage, "TestAgt_SWIJPL")
			case 'TestAgt_SWIJPL':
				fullyQualifiedAgent = String.format("%s.%s", basePackage, "TestAgt_SWIJPL")
			case 'TestAgt_SWIMochalog':
				fullyQualifiedAgent = String.format("%s.%s", basePackage, "TestAgt_SWI")
			default:
				throw new IllegalArgumentException("Invalid agent to start: " + agentToLaunch)
		}

		// now get agent class for fullQualifiedAgent and boot it
		System.out.println(String.format("Loading SARL controller agent %s (%s)", fullyQualifiedAgent, agentToLaunch))
		val type = Class.forName(fullyQualifiedAgent)
		var SARLagent : Class<? extends Agent>
		SARLagent = type.asSubclass(Agent)
		assert SARLagent != null;
		Boot.startJanus(SARLagent)
	}

	/** 
	 * Given a set of options, present them with a message and ask user which one; return the option string
	 */
	static def getSelectionFromuser(message : String, options : String[]) : String {
		System.out.println(message);
		for (var i = 0; i < options.size; i++) {
			System.out.println(String.format("%d. %s", i + 1, options.get(i)))
		}
		val in : Scanner = new Scanner(System.in)
		var confNum : Integer = null
		while (confNum === null) {
			try {
				confNum = Integer.parseInt(in.next())
				if (confNum < 1 || confNum > options.size) {
					System.out.println("No option for that number, try again:")
			                confNum = null
				}
			} catch (e : Exception) {
				System.out.println("Invalid number, try again:")
			}
		}
		return options.get(confNum.intValue - 1)
	}

}
